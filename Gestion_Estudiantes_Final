#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define MAX_ESTUDIANTES 100
#define MAX_MATERIAS 20
#define MAX_NOMBRE 50
#define MAX_APELLIDO 50
#define MAX_DNI 10
#define MAX_EMAIL 50
#define MAX_DIRECCION 100
#define MAX_TELEFONO 15

typedef struct {
	char nombre[MAX_NOMBRE];
	char apellido[MAX_APELLIDO];
	char dni[MAX_DNI];
	char email[MAX_EMAIL];
	char direccion[MAX_DIRECCION];
	char telefono[MAX_TELEFONO];
	char contactoEmergencia[MAX_TELEFONO];
	int legajo;
	float notas[MAX_MATERIAS];
	int inasistencias[MAX_MATERIAS];
	int materiasCursadas[MAX_MATERIAS];
} Estudiante;

Estudiante estudiantes[MAX_ESTUDIANTES];
int contadorEstudiantes = 0;

// Prototipos
int validarEmail(const char *email);
int validarDNI(const char *dni);
int validarTelefono(const char *telefono);
void mostrarMenu();
void mostrarMaterias(int anio);
void ingresarNotas(int index, int anio);
void mostrarEstudiante(int index);
void cargarEstudiante();
void editarEstudiante();
void guardarEnArchivo();

/*Procedimiento para Validar Mail(Logica Principal del Programa)*/
int validarEmail(const char *email) {
	const char *arroba = strchr(email, '@');
	const char *punto = strrchr(email, '.');
	return (arroba && punto && punto > arroba && arroba != email && *(punto + 1) != '\0');
}

/*Procedimiento para Validar DNI(Logica Principal del Programa)*/
int validarDNI(const char *dni) {
	if (strlen(dni) != 8) return 0;
	for (int i = 0; dni[i]; i++) {
		if (!isdigit(dni[i])) return 0;
	}
	return 1;
}

/*Procedimiento para Validar Telefono(Logica Principal del Programa)*/
int validarTelefono(const char *telefono) {
	if (strlen(telefono) != 10) return 0;
	for (int i = 0; i < 10; i++) {
		if (!isdigit(telefono[i])) return 0;
	}
	return 1;
}
/*Procedimiento para Mostrar el Menú(Logica Principal del Programa)*/
void mostrarMenu() {
	printf("\n========================================\n");
	printf("         MENU DE ADMINISTRACION         \n");
	printf("========================================\n");
	printf("1. Cargar nuevo estudiante\n");
	printf("2. Mostrar Datos\n");
	printf("3. Editar Estudiante\n");
	printf("4. Buscar Estudiante\n");
	printf("5. Mostrar Top 3 Promedios\n");
	printf("6. Guardar en archivo\n");
	printf("7. Salir\n");
	printf("========================================\n");
}
/*Procedimiento para Mostrar las Materias(Logica del Programa)*/
void mostrarMaterias(int anio) {
	if (anio == 1) {
		printf("\nMaterias de Primer Año:\n");
		printf("1. Programacion I\n2. Arquitectura y Sistemas Operativos\n3. Matematica\n4. Organizacion Empresarial\n5. Programacion II\n6. Probabilidad y Estadistica\n7. Base de Datos I\n8. Ingles I\n");
	} else {
		printf("\nMaterias de Segundo Año:\n");
		printf("1. Programacion III\n2. Base de Datos II\n3. Metodologia de Sistemas I\n4. Ingles II\n5. Programacion IV\n6. Metodologia de Sistemas II\n7. Introduccion al Analisis de Datos\n8. Legislacion\n9. Gestion de Desarrollo de Software\n");
	}
}

/*Procedimiento para Ingreso de Notas(Logica Principal del Programa Y Operaciones con Arreglos)*/
void ingresarNotas(int index, int anio) {
	int materia;
	char continuar;
	do {
		mostrarMaterias(anio);
		printf("Seleccione la materia (numero): ");
		scanf("%d", &materia);
		materia--;
		
		int offset = (anio == 2) ? 8 : 0;
		int limite = (anio == 1) ? 8 : 9;
		if (materia >= 0 && materia < limite) {
			float n1, n2, n3;
			
			do {
				printf("Ingrese Nota 1 (0 a 10): ");
				scanf("%f", &n1);
				if (n1 < 0 || n1 > 10) printf("Nota inválida. Debe estar entre 0 y 10.\n");
			} while (n1 < 0 || n1 > 10);
			
			do {
				printf("Ingrese Nota 2 (0 a 10): ");
				scanf("%f", &n2);
				if (n2 < 0 || n2 > 10) printf("Nota inválida. Debe estar entre 0 y 10.\n");
			} while (n2 < 0 || n2 > 10);
			
			do {
				printf("Ingrese Nota 3 (0 a 10): ");
				scanf("%f", &n3);
				if (n3 < 0 || n3 > 10) printf("Nota inválida. Debe estar entre 0 y 10.\n");
			} while (n3 < 0 || n3 > 10);
			
			estudiantes[index].notas[materia + offset] = (n1 + n2 + n3) / 3.0;
			
			int inasistencias;
			do {
				printf("Ingrese Inasistencias (máximo 30): ");
				scanf("%d", &inasistencias);
				if (inasistencias < 0 || inasistencias > 30)
					printf("Cantidad inválida. Debe estar entre 0 y 30.\n");
			} while (inasistencias < 0 || inasistencias > 30);
			estudiantes[index].inasistencias[materia + offset] = inasistencias;
			
			estudiantes[index].materiasCursadas[materia + offset] = 1;
		} else {
			printf("Materia inválida.\n");
		}
		
		printf("¿Desea cargar otra materia? (s/n): ");
		scanf(" %c", &continuar);
	} while (continuar == 's' || continuar == 'S');
}

/*Procedimiento para Mostrar Datos de Estudiantres(Operacion Con Arreglos)*/
void mostrarEstudiante(int index) {
	printf("\n--- Datos del Estudiante ---\n");
	printf("Legajo: %d\nDNI: %s\nNombre: %s\nApellido: %s\nEmail: %s\nDireccion: %s\nTelefono: %s\nEmergencia: %s\n",
		   estudiantes[index].legajo, estudiantes[index].dni, estudiantes[index].nombre,
		   estudiantes[index].apellido, estudiantes[index].email, estudiantes[index].direccion,
		   estudiantes[index].telefono, estudiantes[index].contactoEmergencia);
	for (int i = 0; i < MAX_MATERIAS; i++) {
		if (estudiantes[index].materiasCursadas[i]) {
			printf("Materia %d: Promedio = %.2f | Inasistencias = %d\n", i + 1, estudiantes[index].notas[i], estudiantes[index].inasistencias[i]);
		}
	}
}

/*Procedimiento para Buscar Estudiantres(Operacion Con Arreglos)*/
void buscarEstudiante() {
	char criterio[50];
	int encontrado = 0;
	
	printf("Ingrese el nombre o DNI del estudiante a buscar: ");
	scanf("%s", criterio);
	
	for (int i = 0; i < contadorEstudiantes; i++) {
		if (strcmp(estudiantes[i].dni, criterio) == 0 || strcasecmp(estudiantes[i].nombre, criterio) == 0) {
			printf("\nEstudiante encontrado:\n");
			mostrarEstudiante(i);
			encontrado = 1;
		}
	}
	
	if (!encontrado) {
		printf("No se encontró ningún estudiante con ese nombre o DNI.\n");
	}
}

/*Procedimiento para Cargar Estudiantres(Logica Principal y Operacion Con Arreglos)*/
void cargarEstudiante() {
	if (contadorEstudiantes >= MAX_ESTUDIANTES) {
		printf("No se pueden cargar más estudiantes. Límite alcanzado.\n");
		return;
	}
	
	Estudiante nuevo;
	nuevo.legajo = contadorEstudiantes + 1;
	
	do {
		printf("Ingrese DNI (8 dígitos numéricos): ");
		scanf("%s", nuevo.dni);
		if (!validarDNI(nuevo.dni)) {
			printf("DNI inválido. Intente nuevamente.\n");
		}
	} while (!validarDNI(nuevo.dni));
	
	printf("Ingrese Nombre: ");
	scanf(" %[^\n]", nuevo.nombre);
	printf("Ingrese Apellido: ");
	scanf(" %[^\n]", nuevo.apellido);
	
	do {
		printf("Ingrese Email: ");
		scanf("%s", nuevo.email);
		if (!validarEmail(nuevo.email)) {
			printf("Email invalido. Intente nuevamente.\n");
		}
	} while (!validarEmail(nuevo.email));
	
	printf("Ingrese Direccion: ");
	scanf(" %[^\n]", nuevo.direccion);
	
	do {
		printf("Ingrese Telefono personal (10 digitos): ");
		scanf("%s", nuevo.telefono);
		if (!validarTelefono(nuevo.telefono)) {
			printf("Telefono invalido. Debe tener exactamente 10 digitos numéricos.\n");
		}
	} while (!validarTelefono(nuevo.telefono));
	
	do {
		printf("Ingrese Telefono de emergencia (10 digitos): ");
		scanf("%s", nuevo.contactoEmergencia);
		if (!validarTelefono(nuevo.contactoEmergencia)) {
			printf("Telefono invalido. Debe tener exactamente 10 digitos numéricos.\n");
		}
	} while (!validarTelefono(nuevo.contactoEmergencia));
	
	for (int i = 0; i < MAX_MATERIAS; i++) {
		nuevo.notas[i] = 0;
		nuevo.inasistencias[i] = 0;
		nuevo.materiasCursadas[i] = 0;
	}
	
	estudiantes[contadorEstudiantes] = nuevo;
	
	char continuar = 's';
	while (continuar == 's' || continuar == 'S') {
		int anio;
		printf("Cargar materias de que Año? (1 o 2): ");
		scanf("%d", &anio);
		ingresarNotas(contadorEstudiantes, anio);
		printf("Desea cargar materias de otro Año? (s/n): ");
		scanf(" %c", &continuar);
	}
	
	mostrarEstudiante(contadorEstudiantes);
	contadorEstudiantes++;
}
/Procedimiento para Editar Datos de Estudiantres(Operacion Con Arreglos y Logica Principal)/
void editarEstudiante() {
	char dni[MAX_DNI];
	printf("Ingrese el DNI del estudiante a editar: ");
	scanf("%s", dni);
	for (int i = 0; i < contadorEstudiantes; i++) {
		if (strcmp(estudiantes[i].dni, dni) == 0) {
			printf("Estudiante encontrado:\n");
			mostrarEstudiante(i);
			printf("Nuevo Email: ");
			scanf("%s", estudiantes[i].email);
			printf("Nuevo Telefono: ");
			scanf("%s", estudiantes[i].telefono);
			printf("Nuevo Telefono emergencia: ");
			scanf("%s", estudiantes[i].contactoEmergencia);
			int anio;
			printf("Editar materias de que año (1 o 2): ");
			scanf("%d", &anio);
			ingresarNotas(i, anio);
			return;
		}
	}
	printf("Estudiante no encontrado.\n");
}

/Procedimiento para Guardar Datos de Estudiantres(Archivos)/
void guardarEnArchivo() {
	FILE *file = fopen("informe_estudiantes.txt", "w");
	if (!file) {
		printf("Error al abrir el archivo.\n");
		return;
	}
	for (int i = 0; i < contadorEstudiantes; i++) {
		fprintf(file, "Legajo: %d\nDNI: %s\nNombre: %s %s\nEmail: %s\nTelefono: %s\nEmergencia: %s\n",
				estudiantes[i].legajo, estudiantes[i].dni, estudiantes[i].nombre,
				estudiantes[i].apellido, estudiantes[i].email, estudiantes[i].telefono,
				estudiantes[i].contactoEmergencia);
		for (int j = 0; j < MAX_MATERIAS; j++) {
			if (estudiantes[i].materiasCursadas[j]) {
				fprintf(file, "Materia %d: Promedio %.2f - Inasistencias %d\n",
						j + 1, estudiantes[i].notas[j], estudiantes[i].inasistencias[j]);
			}
		}
		fprintf(file, "\n");
	}
	fclose(file);
	printf("Informe guardado en 'informe_estudiantes.txt'.\n");
}
/Procedimiento para Mostrar Promedios de Estudiantres(Operacion Con Arreglos)/
void mostrarMejoresPromedios() {
	if (contadorEstudiantes == 0) {
		printf("No hay estudiantes cargados.\n");
		return;
	}
	
	// Estructura auxiliar para guardar índice y promedio
	typedef struct {
		int index;
		float promedio;
	} EstudiantePromedio;
	
	EstudiantePromedio listaPromedios[MAX_ESTUDIANTES];
	
	// Calcular promedios individuales
	for (int i = 0; i < contadorEstudiantes; i++) {
		float suma = 0;
		int materias = 0;
		for (int j = 0; j < MAX_MATERIAS; j++) {
			if (estudiantes[i].materiasCursadas[j]) {
				suma += estudiantes[i].notas[j];
				materias++;
			}
		}
		listaPromedios[i].index = i;
		listaPromedios[i].promedio = (materias > 0) ? suma / materias : 0;
	}
	
	// Ordenar por promedio descendente 
	for (int i = 0; i < contadorEstudiantes - 1; i++) {
		for (int j = i + 1; j < contadorEstudiantes; j++) {
			if (listaPromedios[i].promedio < listaPromedios[j].promedio) {
				EstudiantePromedio temp = listaPromedios[i];
				listaPromedios[i] = listaPromedios[j];
				listaPromedios[j] = temp;
			}
		}
	}
	
	printf("\n--- Top 3 Mejores Promedios ---\n");
	int limite = (contadorEstudiantes < 3) ? contadorEstudiantes : 3;
	for (int i = 0; i < limite; i++) {
		int idx = listaPromedios[i].index;
		printf("%d. %s %s - Promedio General: %.2f\n", 
			   i + 1, estudiantes[idx].nombre, estudiantes[idx].apellido, listaPromedios[i].promedio);
	}
}
