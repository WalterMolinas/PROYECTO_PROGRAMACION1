#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define MAX_MATERIAS 8
#define MAX_NOMBRE 50
#define MAX_APELLIDO 50
#define MAX_DNI 10
#define MAX_EMAIL 50
#define MAX_DIRECCION 100
#define MAX_TELEFONO 15

typedef struct Estudiante {
	char nombre[MAX_NOMBRE];
	char apellido[MAX_APELLIDO];
	char dni[MAX_DNI];
	char email[MAX_EMAIL];
	char direccion[MAX_DIRECCION];
	char telefono[MAX_TELEFONO];
	char contactoEmergencia[MAX_TELEFONO];
	int legajo;
	float notas[MAX_MATERIAS];
	int inasistencias[MAX_MATERIAS];
	int materiasCursadas[MAX_MATERIAS];
	struct Estudiante *siguiente;
} Estudiante;

Estudiante *lista = NULL;
int contadorLegajo = 1;

// Prototipos
int validarEmail(const char *email);
int validarDNI(const char *dni);
int validarTelefono(const char *telefono);
void mostrarMenu();
void ingresarNotas(Estudiante *est);
void mostrarEstudiante(Estudiante *e);
void cargarEstudiante();
void buscarEstudiante();
void mostrarMejoresPromedios();

//Procedimiento para Validar Mail(Logica Principal del Programa)
int validarEmail(const char *email) {
	const char *arroba = strchr(email, '@');
	const char *punto = strrchr(email, '.');
	return (arroba && punto && punto > arroba && arroba != email && *(punto + 1) != '\0');
}

//Procedimiento para Validar DNI(Logica Principal del Programa)
int validarDNI(const char *dni) {
	if (strlen(dni) != 8) return 0;
	for (int i = 0; dni[i]; i++) if (!isdigit(dni[i])) return 0;
	return 1;
}


//Procedimiento para Validar Telefono(Logica Principal del Programa)
int validarTelefono(const char *telefono) {
	if (strlen(telefono) != 10) return 0;
	for (int i = 0; i < 10; i++) if (!isdigit(telefono[i])) return 0;
	return 1;
}

//Procedimiento para Mostrar el Menú(Logica Principal del Programa)
void mostrarMenu() {
	printf("\n=========== MENU ===========\n");
	printf("1. Cargar Estudiante\n");
	printf("2. Mostrar Datos de Estudiantes\n");
	printf("3. Buscar Estudiante\n");
	printf("4. Mostrar Top 3 Promedios\n");
	printf("5. Eliminar Estudiante\n");
	printf("6. Guardar en Archivo\n");
	printf("7. Salir\n");
	printf("============================\n");
}

//Procedimiento para Ingreso de Notas(Logica Principal del Programa Y Operaciones con Listas)
void ingresarNotas(Estudiante *est) {
	int materia;
	char continuar;
	int offset = 0;   // Primer año
	int limite = 8;   // Solo materias de primer año
	
	do {
		printf("\nMaterias de Primer Año:\n");
		printf("1. Programacion I\n2. Arquitectura y Sistemas Operativos\n3. Matematica\n4. Organizacion Empresarial\n");
		printf("5. Programacion II\n6. Probabilidad y Estadistica\n7. Base de Datos I\n8. Ingles I\n");
		printf("Seleccione la materia (1-%d): ", limite);
		scanf("%d", &materia);
		materia--;
		
		if (materia >= 0 && materia < limite) {
			float n1, n2, n3;
			do {
				printf("Nota 1: "); scanf("%f", &n1);
			} while (n1 < 0 || n1 > 10);
			do {
				printf("Nota 2: "); scanf("%f", &n2);
			} while (n2 < 0 || n2 > 10);
			do {
				printf("Nota 3: "); scanf("%f", &n3);
			} while (n3 < 0 || n3 > 10);
			
			est->notas[materia + offset] = (n1 + n2 + n3) / 3.0;
			
			int inas;
			do {
				printf("Inasistencias (0-30): ");
				scanf("%d", &inas);
			} while (inas < 0 || inas > 30);
			est->inasistencias[materia + offset] = inas;
			est->materiasCursadas[materia + offset] = 1;
		} else {
			printf("Materia invalida.\n");
		}
		
		printf("¿Otra materia? (s/n): ");
		scanf(" %c", &continuar);
	} while (continuar == 's' || continuar == 'S');
	
	printf("\n Estudiante cargado correctamente.\n");
}

//Procedimiento para Mostrar Datos de Estudiantres(Operacion Con Listas y Busqueda)
void mostrarEstudiante(Estudiante *e) {
	printf("\nLegajo: %d\nDNI: %s\nNombre: %s %s\nEmail: %s\nTelefono: %s\nEmergencia: %s\n",
		   e->legajo, e->dni, e->nombre, e->apellido, e->email, e->telefono, e->contactoEmergencia);
	for (int i = 0; i < MAX_MATERIAS; i++) {
		if (e->materiasCursadas[i]) {
			printf("Materia %d: Promedio = %.2f | Inasistencias = %d\n", i + 1, e->notas[i], e->inasistencias[i]);
		}
	}
}

//Procedimiento para Cargar Estudiantres(Logica Principal y Operacion Con Listas)
void cargarEstudiante() {
	Estudiante *nuevo = (Estudiante *)malloc(sizeof(Estudiante));
	nuevo->legajo = contadorLegajo++;
	nuevo->siguiente = NULL;
	
	do {
		printf("DNI: "); scanf("%s", nuevo->dni);
		if (!validarDNI(nuevo->dni)) {
			printf("DNI invalido. Debe tener 8 digitos numericos.\n");
		}
	} while (!validarDNI(nuevo->dni));
	
	printf("Nombre: "); scanf(" %[^\n]", nuevo->nombre);
	printf("Apellido: "); scanf(" %[^\n]", nuevo->apellido);
	
	do {
		printf("Email: "); scanf("%s", nuevo->email);
		if (!validarEmail(nuevo->email)) {
			printf("Email invalido. Debe tener formato ejemplo@dominio.com\n");
		}
	} while (!validarEmail(nuevo->email));
	
	printf("Direccion: "); scanf(" %[^\n]", nuevo->direccion);
	
	do {
		printf("Telefono: "); scanf("%s", nuevo->telefono);
		if (!validarTelefono(nuevo->telefono)) {
			printf("Numero invalido. Debe contener exactamente 10 digitos numericos.\n");
		}
	} while (!validarTelefono(nuevo->telefono));
	
	do {
		printf("Emergencia: "); scanf("%s", nuevo->contactoEmergencia);
		if (!validarTelefono(nuevo->contactoEmergencia)) {
			printf("Numero invalido. Debe contener exactamente 10 digitos numericos.\n");
		}
	} while (!validarTelefono(nuevo->contactoEmergencia));
	
	for (int i = 0; i < MAX_MATERIAS; i++) {
		nuevo->notas[i] = 0;
		nuevo->inasistencias[i] = 0;
		nuevo->materiasCursadas[i] = 0;
	}
	
	printf("\n¡Vamos a cargar notas de Primer Año!\n");
	ingresarNotas(nuevo);
	
	nuevo->siguiente = lista;
	lista = nuevo;
}

//Procedimiento para Buscar Estudiantres(Operacion Con Listas)
void buscarEstudiante() {
	char criterio[50];
	printf("Buscar por nombre o DNI: ");
	scanf("%s", criterio);
	Estudiante *actual = lista;
	int encontrado = 0;
	while (actual) {
		if (strcasecmp(actual->nombre, criterio) == 0 || strcmp(actual->dni, criterio) == 0) {
			mostrarEstudiante(actual);
			encontrado = 1;
		}
		actual = actual->siguiente;
	}
	if (!encontrado) printf("Estudiante no encontrado.\n");
}
